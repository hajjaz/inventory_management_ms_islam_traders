/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restaurantpos;

import DB.CustomerDBHelper;
import Model.InvCustomer;
import Utilities.Utilities;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Cor2Tect
 */
public class Add_DueBill extends javax.swing.JFrame {

    public DBGateway dbg;
    Connection connection = null;
    double TP;
    private int RowNo;
    int Height = 0;

    /**
     * Creates new form Search_Bill
     */
    public Add_DueBill() {
        this.RowNo = 0;
        this.dbg = new DBGateway();

        initComponents();
        connection = dbg.connectionTest();
        TP = 0.0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        tvReceiptNo = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnAddDueBill = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Due Bill By Receipt No");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Receipt#");

        tvReceiptNo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Qty", "Name", "UnitPrice", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 255, 255));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 0));
        jLabel3.setText("Enter Receipt No & Search Bill then Add to Due Bill");

        btnAddDueBill.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddDueBill.setText("Add Due Bill");
        btnAddDueBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDueBillActionPerformed(evt);
            }
        });

        btnPrint.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPrint.setText("Print Bill");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tvReceiptNo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addGap(86, 86, 86)
                        .addComponent(btnAddDueBill, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tvReceiptNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddDueBill, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        TP = 0.0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt("", i, j);
            }
        }

        RowNo = 0;
        Date time = Calendar.getInstance().getTime();
        DateFormat formatter = new SimpleDateFormat(" dd-MMM-yyyy ");
        String date = formatter.format(time);
        String from = "'" + date + "'";

        String billNo = "'" + tvReceiptNo.getText() + "'";

        int quantity = 0;
        double unitPrice = 0.0, sellsPrice = 0.0;
        java.sql.Statement stm1 = null;
        ResultSet rs = null;
        try {
            stm1 = connection.createStatement();
            rs = stm1.executeQuery("SELECT * FROM inv_transaction where bill_no = " + billNo + " and to_date(tran_date) between to_date(" + from + ") "
                    + "and to_date(" + from + ")");
            // print the results
            while (rs.next()) {
                quantity = Integer.parseInt(rs.getString(3));
                jTable1.setValueAt(quantity, RowNo, 0);
                jTable1.setValueAt(rs.getString(2), RowNo, 1);
                sellsPrice = Double.parseDouble(rs.getString(4));
                jTable1.setValueAt(sellsPrice, RowNo, 3);

                unitPrice = sellsPrice / quantity;
                jTable1.setValueAt(unitPrice, RowNo, 2);
                RowNo++;
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            //JOptionPane.showMessageDialog(rootPane, e.toString(),"Error",1);
        } finally {
            DatabaseUtils.close(rs);
            DatabaseUtils.close(stm1);
        }

        double p = 0.0, _vat = 0.0, _discount = 0.0;
        for (int j = 0; j < RowNo; j++) {
            String s = String.valueOf(jTable1.getValueAt(j, 3));
            //JOptionPane.showMessageDialog(rootPane, s);
            if (s.equals("null")) {
                p = 0.0;
            } else {
                p = Double.parseDouble(s);
            }
            //System.out.println(p);
            TP += p;
        }
        jTable1.setValueAt("Total =", RowNo, 2);
        jTable1.setValueAt(TP, RowNo, 3);
        RowNo++;

        double vatTk = 0.0;
        java.sql.Statement stm2 = null;
        ResultSet rs2 = null;
        try {
            stm2 = connection.createStatement();
            rs2 = stm2.executeQuery("SELECT * FROM inv_vat where bill_no = " + billNo + " and to_date(vat_date) between to_date(" + from + ") "
                    + "and to_date(" + from + ")");
            // print the results
            while (rs2.next()) {
                vatTk = Double.parseDouble(rs2.getString(1));
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            //JOptionPane.showMessageDialog(rootPane, e.toString(),"Error",1);
        } finally {
            DatabaseUtils.close(rs2);
            DatabaseUtils.close(stm2);
        }

        double discountTk = 0.0;
        java.sql.Statement stm3 = null;
        ResultSet rs3 = null;
        try {
            stm3 = connection.createStatement();
            rs3 = stm3.executeQuery("SELECT * FROM inv_discount where bill_no = " + billNo + " and to_date(disc_date) between to_date(" + from + ") "
                    + "and to_date(" + from + ")");
            // print the results
            while (rs3.next()) {
                discountTk = Double.parseDouble(rs3.getString(1));
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            //JOptionPane.showMessageDialog(rootPane, e.toString(),"Error",1);
        } finally {
            DatabaseUtils.close(rs2);
            DatabaseUtils.close(stm2);
        }

        if (vatTk > 0) {
            jTable1.setValueAt("Vat =", RowNo, 2);
            jTable1.setValueAt(vatTk, RowNo, 3);
            RowNo++;
            TP = TP + vatTk;
        }

        if (discountTk > 0) {
            jTable1.setValueAt("Less =", RowNo, 2);
            jTable1.setValueAt(discountTk, RowNo, 3);
            RowNo++;
            TP = TP - discountTk;
        }

        if (vatTk > 0 || discountTk > 0) {
            jTable1.setValueAt("Total =", RowNo, 2);
            jTable1.setValueAt(TP, RowNo, 3);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error In Closing DBConnection. Please Ignore it & Click OK.");
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnAddDueBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDueBillActionPerformed
        // TODO add your handling code here:
        int flag = 0;
        if (TP == 0) {
            JOptionPane.showMessageDialog(this, "Search Bill First Then Add To Due Bill.");
        } else {
            Date time = Calendar.getInstance().getTime();
            DateFormat formatter = new SimpleDateFormat(" dd-MMM-yyyy ");
            String date = formatter.format(time);
            String from = "'" + date + "'";
            java.sql.Statement stm6 = null;
            ResultSet rs6 = null;
            try {
                stm6 = connection.createStatement();
                rs6 = stm6.executeQuery("SELECT serial from bill_due where "
                        + " to_date(bill_date) between to_date(" + from + ") " + "and to_date(" + from + ")");
                // print the results
                while (rs6.next()) {
                    if (tvReceiptNo.getText().equals(rs6.getString(1))) {
                        flag = 1;
                        break;
                    }
                }
            } catch (Exception e) {
                System.out.println(e.toString());
                //JOptionPane.showMessageDialog(rootPane, e.toString(),"Error4",1);
            } finally {
                DatabaseUtils.close(rs6);
                DatabaseUtils.close(stm6);
            }

            if (flag == 1) {
                JOptionPane.showMessageDialog(this, "This Bill Is Already In Due Bill.");
            } else {

                JTextField amountField = new JTextField(7);

                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("Due Amount:"));
                myPanel.add(amountField);
                myPanel.add(Box.createHorizontalStrut(15)); // a spacer
                List<InvCustomer> invItemList = null;
                invItemList = CustomerDBHelper.getListOfCustomers(connection);
                Vector comboBoxItems = new Vector();
                for (InvCustomer item : invItemList) {
                    System.out.println("Customer= " + item.getCustomerId() + ", " + item.getCustomerName());
                    comboBoxItems.addElement(new Item(item.getCustomerId(), item.getCustomerName()));
                }
                final DefaultComboBoxModel model = new DefaultComboBoxModel(comboBoxItems);
                JComboBox comboBox = new JComboBox(model);
                AutoCompleteDecorator.decorate(comboBox);
                myPanel.add(comboBox);

                amountField.setText(String.valueOf(TP));
                int result = JOptionPane.showConfirmDialog(null, myPanel,
                        "Please Enter The Person's Name & Amount(if Required)", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {

                    Item item = (Item) comboBox.getSelectedItem();
                    String amount = amountField.getText(), name = item.getDescription();
                    //inserting data into transaction table
//                    PreparedStatement statement = null;
//                    try {
//                            statement = connection.prepareStatement
//                    ("INSERT INTO bill_due (cusomerName, amount, serial, bill_date)"
//                            + "VALUES (?, ?, ?, ?)");
//                            statement.setString(1, name);
//                            statement.setString(2, amount);
//                            statement.setString(3, tvReceiptNo.getText());
//                            statement.setString(4, date);
//
//                            statement.execute();
//                            JOptionPane.showMessageDialog(this, "Successfully Added To Due Bill.");
//                        } catch (Exception e) {
//                            // TODO: handle exception
//                            e.printStackTrace();
//                            System.out.println("Error while inserting data!");
//                            JOptionPane.showMessageDialog(rootPane, e.toString(),"Error",1);
//                        }finally
//                        {
//                            DatabaseUtils.close(statement);
//                        }

                    Add_BillDue(name, amount, Integer.parseInt(tvReceiptNo.getText()), date);
                    Add_Due_Bill_For_Dashboard(name, amount, Integer.parseInt(tvReceiptNo.getText()), date);
                    addDueAmountToCustomerTable(item.getId(), Double.parseDouble(amount));

                    CustomerDBHelper.setCustomerActivity(item.getId(), tvReceiptNo.getText(), "", amount, "", "", connection);

                    //write activity log
                    DatabaseUtils.WriteActivityLog(connection, Utilities.UserName, "Add Due Bill. CustomerName = " + name + " bill_date = " + date + " amount = " + amount + ", billNo = " + tvReceiptNo.getText() + "", Add_DueBill.class.getSimpleName() + ", btnAddDueBillActionPerformed()");

                }
            }
        }
    }//GEN-LAST:event_btnAddDueBillActionPerformed

    private void addDueAmountToCustomerTable(int id, Double amount) {

        Double dueAmount = CustomerDBHelper.getDueAmountOfCustomer(id, connection);
        Double totalDue = dueAmount + amount;
        boolean result = CustomerDBHelper.updateDueAmountOfCustomer(id, totalDue, connection);
        System.out.println(result ? "Successfuly updated." : "Failed to update.");
    }

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        if (jTable1.getValueAt(0, 0) != null && RowNo != 0) {
            System.out.println("RowNo = " + RowNo + " RowCount = " + jTable1.getRowCount());
            PrintBill(0);
        } else {
            JOptionPane.showMessageDialog(this, "No Item To Print!", "Warning", 2);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void PrintBill(int Print0Token1) {

        Date date = Calendar.getInstance().getTime();
        DateFormat formatter = new SimpleDateFormat(" dd/MM/yyyy, hh:mm a");
        String Time = "Date:" + formatter.format(date);
        System.out.println("RowNo =" + RowNo);

        String Thank = "Thank You For Coming Here!", vatReg = "Vat Reg# 18011057968",
                HD = "Cell No: 01834268714, 01731267763.", elseCode = "Powered By ElseCode.", blank = " ";
        String line = "---------------------------------------",
                CName = "New Shad Restora", CAddress1 = "Plot# 35, Sonargaon Janapath Road",
                CAddress2 = "Sector# 12, Uttara, Dhaka 1230", CAddress3 = "";
        String S[][] = new String[50][5];
        S[0][0] = "Qty";
        S[0][1] = "Description";
        S[0][2] = "UnitP";
        S[0][3] = "Price";
        String s;
        int size = RowNo;
        for (int i = 0; i <= size; i++) {

            if ((s = String.valueOf(jTable1.getValueAt(i, 0))) != null) {
                S[i + 1][0] = s;
            }
            if ((s = String.valueOf(jTable1.getValueAt(i, 1))) != null) {
                S[i + 1][1] = s;
            }
            if ((s = String.valueOf(jTable1.getValueAt(i, 2))) != null) {
                S[i + 1][2] = s;
            }
            if ((s = String.valueOf(jTable1.getValueAt(i, 3))) != null) {
                S[i + 1][3] = s;
            }
        }

        //for receipt number
        Date time1 = Calendar.getInstance().getTime();
        DateFormat formatter1 = new SimpleDateFormat(" dd-MMM-yyyy ");
        String date1 = formatter1.format(time1);
        int receiptNo = Integer.parseInt(tvReceiptNo.getText());
//        _receiptNo = receiptNo;

        if (InventoryPOS.printPageSizeBig) {
            printCard();
        } else {
            printCard_Small();
        }

        int catID = 0, rowno = RowNo;

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt("", i, j);
            }
        }

    }

    private void printCard() {

        PrinterJob printjob = PrinterJob.getPrinterJob();
        printjob.setJobName("Label");

        Printable printable;
        printable = new Printable() {

            @Override
            public int print(Graphics pg, PageFormat pf, int pageNum) throws PrinterException {
                //To change body of generated methods, choose Tools | Templates.
                if (pageNum > 0) {
                    return Printable.NO_SUCH_PAGE;
                }

                //Dimension size = jLayeredPane2.getSize();
                //BufferedImage bufferedImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);
                //jLayeredPane2.print(bufferedImage.getGraphics());
                Graphics2D g = (Graphics2D) pg;
                g.translate(pf.getImageableX(), pf.getImageableY());
                Date date = Calendar.getInstance().getTime();
                DateFormat formatter = new SimpleDateFormat(" dd/MM/yyyy");
                String Time = "Date: " + formatter.format(date);
                System.out.println("RowNo =" + RowNo);

                String RNo = "Receipt# " + Integer.parseInt(tvReceiptNo.getText()), Thank = "Thank You For Coming Here!", vatReg = "Vat Reg# 18011057968",
                        HD = "Cell No: 01834268714, 01731267763.", elseCode = "Powered By ElseCode.";
                String line = "----------------------------------",
                        CName = "New Shad Restora", CAddress1 = "Plot# 35,Sonargaon Janapath Road,", CAddress2 = "Sector# 12, Uttara, Dhaka 1230";
                String S[][] = new String[50][5];
                S[0][0] = "Qty";
                S[0][1] = "Description";
                S[0][2] = "UnitP";
                S[0][3] = "Price";
                String s;
                int size = RowNo;
                for (int i = 0; i <= size; i++) {

                    if ((s = String.valueOf(jTable1.getValueAt(i, 0))) != null) {
                        S[i + 1][0] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 1))) != null) {
                        S[i + 1][1] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 2))) != null) {
                        S[i + 1][2] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 3))) != null) {
                        S[i + 1][3] = s;
                    }
                    System.out.println("S[" + i + "] = " + S[i][0]);
                }
                int h = 1, height = 0;;
//        Properties properties = new Properties();
//        PrintJob _printJob = Toolkit.getDefaultToolkit().getPrintJob(TablePrint.this, "name", properties);
//        
//        Graphics g = _printJob.getGraphics();
                g.setFont(new Font("Courier New", Font.BOLD, 14));
                g.drawString(InventoryPOS.companyName, 35, 15);
                g.setFont(new Font("Courier New", Font.BOLD, 8));
                g.drawString(InventoryPOS.strBillCompanyAddress1, 20, 35);
                g.drawString(InventoryPOS.strBillCompanyAddress2, 20, 45);
                g.drawString(InventoryPOS.strVatRegNo + "  " + RNo, 20, 60);
                g.drawString(Time, 20, 70);
                for (int j = 0; j <= size + 1; j++) {
                    if (j == 0) {
                        h = 1;
                        g.drawString(line, 15, 80);
                        g.drawString(S[j][0], 20, 90 * h);
                        g.drawString(S[j][1], 40, 90 * h);
                        g.drawString(S[j][2], 115, 90 * h);
                        g.drawString(S[j][3], 150, 90 * h);
                        g.drawString(line, 15, 100);
                        height = 100;
                    } else if (j >= 1) {
                        h = j + 1;
                        g.drawString(S[j][0], 20, height + 10);
                        g.drawString(S[j][1], 40, height + 10);
                        g.drawString(S[j][2], 115, height + 10);
                        g.drawString(S[j][3], 150, height + 10);
                        height += 10;
                    }
                }
                g.drawString(InventoryPOS.strBillMessage1, 20, height + 15);
                g.drawString(InventoryPOS.strContactInfo, 20, height + 25);
                g.drawString(InventoryPOS.strElseCode, 20, height + 35);
                g.dispose();
                Height += height + 45;
//        _printJob.end();

                return Printable.PAGE_EXISTS;
            }

        };

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 253, Height);
        //paper.setSize(243, 154);

        PageFormat format = new PageFormat();
        format.setPaper(paper);
        //format.setOrientation(PageFormat.LANDSCAPE);

        printjob.setPrintable(printable, format);
//        if (printjob.printDialog() == false)
//                return;

        try {
            printjob.print();
        } catch (PrinterException ex) {
            System.out.println("NO PAGE FOUND." + ex);

        }
    }

    private void printCard_Small() {

        PrinterJob printjob = PrinterJob.getPrinterJob();
        printjob.setJobName("Label");

        Printable printable;
        printable = new Printable() {

            @Override
            public int print(Graphics pg, PageFormat pf, int pageNum) throws PrinterException {
                //To change body of generated methods, choose Tools | Templates.
                if (pageNum > 0) {
                    return Printable.NO_SUCH_PAGE;
                }

                //Dimension size = jLayeredPane2.getSize();
                //BufferedImage bufferedImage = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);
                //jLayeredPane2.print(bufferedImage.getGraphics());
                Graphics2D g = (Graphics2D) pg;
                g.translate(pf.getImageableX(), pf.getImageableY());
                Date date = Calendar.getInstance().getTime();
                DateFormat formatter = new SimpleDateFormat(" dd/MM/yyyy");
                String Time = "Date: " + formatter.format(date);
                System.out.println("RowNo =" + RowNo);

                String RNo = "Bill# " + Integer.parseInt(tvReceiptNo.getText()), Thank = "Thank You For Coming Here!", vatReg = "Vat Reg# 18011057968",
                        HD = "Cell No: 01834268714, 01731267763.", elseCode = "Powered By ElseCode.";
                String line = "----------------------------------",
                        CName = "New Shad Restora", CAddress1 = "Plot# 35,Sonargaon Janapath Road,", CAddress2 = "Sector# 12, Uttara, Dhaka 1230";
                String S[][] = new String[50][5];
                S[0][0] = "Qty";
                S[0][1] = "Description";
                S[0][2] = "UnitP";
                S[0][3] = "Price";
                String s;
                int size = RowNo;
                for (int i = 0; i <= size; i++) {

                    if ((s = String.valueOf(jTable1.getValueAt(i, 0))) != null) {
                        S[i + 1][0] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 1))) != null) {
                        S[i + 1][1] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 2))) != null) {
                        S[i + 1][2] = s;
                    }
                    if ((s = String.valueOf(jTable1.getValueAt(i, 3))) != null) {
                        S[i + 1][3] = s;
                    }
                    System.out.println("S[" + i + "] = " + S[i][0]);
                }
                int h = 1, height = 0;;
//        Properties properties = new Properties();
//        PrintJob _printJob = Toolkit.getDefaultToolkit().getPrintJob(TablePrint.this, "name", properties);
//        
//        Graphics g = _printJob.getGraphics();
                g.setFont(new Font("Courier New", Font.BOLD, 14));
                g.drawString(InventoryPOS.companyName, 0, 15);
                g.setFont(new Font("Courier New", Font.BOLD, 7));
                g.drawString(InventoryPOS.strBillCompanyAddress1, 0, 35);
                g.drawString(InventoryPOS.strBillCompanyAddress2, 0, 45);
                g.drawString(InventoryPOS.strVatRegNo + " " + RNo, 0, 60);
                g.drawString(Time, 0, 70);
                for (int j = 0; j <= size + 1; j++) {
                    if (j == 0) {
                        h = 1;
                        g.drawString(line, 0, 80);
                        g.drawString(S[j][0], 0, 90 * h);
                        g.drawString(S[j][1], 15, 90 * h);
                        g.drawString(S[j][2], 80, 90 * h);
                        g.drawString(S[j][3], 110, 90 * h);
                        g.drawString(line, 0, 100);
                        height = 100;
                    } else if (j >= 1) {
                        h = j + 1;
                        g.drawString(S[j][0], 0, height + 10);
                        g.drawString(S[j][1], 15, height + 10);
                        g.drawString(S[j][2], 80, height + 10);
                        g.drawString(S[j][3], 110, height + 10);
                        height += 10;
                    }
                }
                g.drawString(InventoryPOS.strBillMessage1, 0, height + 15);
                g.drawString(InventoryPOS.strContactInfo, 0, height + 25);
                g.drawString(InventoryPOS.strElseCode, 0, height + 35);
                g.dispose();
                Height += height + 45;
//        _printJob.end();

                return Printable.PAGE_EXISTS;
            }

        };

        Paper paper = new Paper();
        paper.setImageableArea(0, 0, 253, Height);
        //paper.setSize(243, 154);

        PageFormat format = new PageFormat();
        format.setPaper(paper);
        //format.setOrientation(PageFormat.LANDSCAPE);

        printjob.setPrintable(printable, format);
//        if (printjob.printDialog() == false)
//                return;

        try {
            printjob.print();
        } catch (PrinterException ex) {
            System.out.println("NO PAGE FOUND." + ex);

        }
    }

    private void Add_BillDue(String name, String amount, int receiptNo, String date) {

        //inserting data into transaction table
        PreparedStatement statement = null;
        try {
            statement = connection.prepareStatement("INSERT INTO bill_due (customerName, amount, serial, bill_date)"
                    + "VALUES (?, ?, ?, ?)");
            statement.setString(1, name);
            statement.setString(2, amount);
            statement.setString(3, String.valueOf(receiptNo));
            statement.setString(4, date);

            statement.execute();
            System.out.println(" Result = Success bill_due");
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            //System.out.println("Error while inserting data!");
            JOptionPane.showMessageDialog(rootPane, e.toString(), "Error", 1);
        } finally {
            DatabaseUtils.close(statement);
        }
    }

    private void Add_Due_Bill_For_Dashboard(String name, String amount, int receiptNo, String date) {

        //inserting data into transaction table
        PreparedStatement statement = null;
        try {
            statement = connection.prepareStatement("INSERT INTO due_bill_for_dashboard (cusomerName, amount, serial, bill_date)"
                    + "VALUES (?, ?, ?, ?)");
            statement.setString(1, name);
            statement.setString(2, amount);
            statement.setString(3, String.valueOf(receiptNo));
            statement.setString(4, date);

            statement.execute();
            System.out.println(" Result = Success for Dashboard");

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            //System.out.println("Error while inserting data!");
            JOptionPane.showMessageDialog(rootPane, e.toString(), "Error", 1);
        } finally {
            DatabaseUtils.close(statement);
        }
    }

    public class Item {

        private int id;
        private String description;

        public Item(int id, String description) {
            this.id = id;
            this.description = description;
        }

        public int getId() {
            return id;
        }

        public String getDescription() {
            return description;
        }

        public String toString() {
            return description;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Add_DueBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Add_DueBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Add_DueBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Add_DueBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Add_DueBill().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDueBill;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tvReceiptNo;
    // End of variables declaration//GEN-END:variables
}
